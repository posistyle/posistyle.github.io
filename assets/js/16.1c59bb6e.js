(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{215:function(n,t,a){"use strict";a.r(t);var s=a(28),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm"}},[n._v("#")]),n._v(" npm")]),n._v(" "),a("p",[n._v("npm 全称 Node package manager，是 Node 默认的包管理器，我们可以通过 npm 发布、安装和卸载依赖包；")]),n._v(" "),a("h3",{attrs:{id:"npm常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm常用命令"}},[n._v("#")]),n._v(" npm常用命令")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm install     ## 安装模块\n\nnpm uninstall   ## 卸载模块\n\nnpm uninstall -g [模块名]  ## 卸载全局模块\n\nnpm update      ## 更新模块\n\nnpm ls          ## 查看安装的模块\n\nnpm init        ## 在项目中引导创建一个 package.json 文件\n\nnpm config      ## 管理npm的配置路径\n\nnpm publish     ## 发布模块\n\nnpm version     ## 查看模块版本\n\nnpm help        ## 查看某条命令的详细帮助\n\nnpm root        ## 查看包的安装路径\n\nnpm list -g --depth 0  ## 查看npm全局安装过的包\n\nyarn global list  ## 查看yarn全局安装过的包\n\n")])])]),a("h2",{attrs:{id:"nrm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nrm"}},[n._v("#")]),n._v(" nrm")]),n._v(" "),a("p",[n._v("nrm 是 npm源管理器，它能便捷地切换不同的源来安装依赖包，主要解决了以下问题：")]),n._v(" "),a("blockquote",[a("p",[n._v("平时我们使用 npm 安装依赖包的时候，由于国内的网络访问外网太慢，导致下载速度特别慢；")])]),n._v(" "),a("blockquote",[a("p",[n._v("有些公司内部会搭建一套 npm 私有仓库，这个时候就可以使用 nrm 对内部的 npm源 进行管理；")])]),n._v(" "),a("h3",{attrs:{id:"nrm安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nrm安装"}},[n._v("#")]),n._v(" nrm安装")]),n._v(" "),a("p",[a("code",[n._v("sudo npm install -g nrm")])]),n._v(" "),a("h3",{attrs:{id:"nrm常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nrm常用命令"}},[n._v("#")]),n._v(" nrm常用命令")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("nrm ls                      # 列出可用的源\n\nnrm use <registry>          # 选择源\n\nnrm test npm                # 测试速度\n\nnrm add <registry> <url>    # 添加源\n\nnrm del <registry>          # 删除对应的源\n")])])]),a("h2",{attrs:{id:"nvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nvm"}},[n._v("#")]),n._v(" nvm")]),n._v(" "),a("p",[n._v("简单点说就是  nvm可以让我们一台电脑  装多个版本的node，并且可以随时切换")]),n._v(" "),a("h3",{attrs:{id:"mac安装nvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mac安装nvm"}},[n._v("#")]),n._v(" mac安装nvm")]),n._v(" "),a("p",[n._v("1.使用 curl 安装脚本 (当前安装版本为v0.34.0)或查看最新"),a("a",{attrs:{href:"https://github.com/nvm-sh/nvm",target:"_blank",rel:"noopener noreferrer"}},[n._v("版本"),a("OutboundLink")],1)]),n._v(" "),a("p",[a("code",[n._v("curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash")])]),n._v(" "),a("p",[n._v("2.验证安装 (执行以下命令或退出终端执行nvm)")]),n._v(" "),a("p",[a("code",[n._v("command -v nvm")])]),n._v(" "),a("blockquote",[a("p",[n._v("失败提示： "),a("code",[n._v("nvm command not found")])])]),n._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[n._v("安装失败处理：(失败原因很有可能是因为电脑里边缺少一个叫做 .bash_profile 的文件)")])]),n._v(" "),a("blockquote",[a("p",[n._v("1.查看是否有该文件")])]),n._v(" "),a("p",[a("code",[n._v("vim ~/.bash_profile")])]),n._v(" "),a("blockquote",[a("p",[n._v("2.更改此文件（更改为以下代码）并保存")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('export NVM_DIR="$HOME/.nvm"\n[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" \n[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"\n')])])]),a("blockquote",[a("p",[n._v("3.再次执行安装命令")])]),n._v(" "),a("p",[a("code",[n._v("curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash")])]),n._v(" "),a("h3",{attrs:{id:"nvm常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nvm常用命令"}},[n._v("#")]),n._v(" nvm常用命令")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("nvm install node            ## 安装最新版 node\n\nnvm install stable          ## 安装最新稳定版 \n\nnvm ls-remote               ## 列出所有远程服务器的版本（官方node version list）\n\nnvm install <version>       ## 安装指定版本\n\nnvm uninstall <version>     ## 删除已安装的指定版本，语法与install类似\n\nnvm use <version>           ## 切换使用指定的版本\n\nnvm ls                      ## 列出所有安装的版本\n\nnvm current                 ## 显示当前的版本\n\nnvm alias default <version> ## 设置Node默认版本\n")])])]),a("h3",{attrs:{id:"删除nvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除nvm"}},[n._v("#")]),n._v(" 删除nvm")]),n._v(" "),a("p",[n._v("1.卸载nvm")]),n._v(" "),a("p",[a("code",[n._v("nvm unload")])]),n._v(" "),a("p",[n._v("2.手动卸载")]),n._v(" "),a("p",[a("code",[n._v('rm -rf "$NVM_DIR"')])]),n._v(" "),a("p",[n._v("3.编辑.bash_profile并删除内容")]),n._v(" "),a("p",[a("code",[n._v("vim ~/.bash_profile")])])])}),[],!1,null,null,null);t.default=e.exports}}]);